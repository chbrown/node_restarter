#!/usr/bin/env node
// argv[0] is "node", argv[1] is the node_restarter path, and [2] is the name of the first command line argument
var fs = require("fs"),
  child_process = require('child_process'),
  extensions = ['.js', '.mu'],
  extensions_filter = extensions.map(function(ext) { return '-name "*' + ext + '"'; }).join(' -o '),
  directories = ['.'];
directories.push.apply(directories, process.argv.slice(3)); // weird (but standard) way to extend array

function ignition() {
  var control = new Restarter();
  control.start();
}

function Restarter() {
  this.process = null;
  this.files = [];
}
Restarter.prototype.start = function() {
  var self = this;
  this.watchFiles();

  console.log('- node_restarter: spawn: ' + process.argv[0] + ' ' + process.argv.slice(1).join(' '));
  this.process = child_process.spawn(process.argv[0], process.argv.slice(2));
  var started = new Date();

  this.process.stdout.pipe(process.stdout, {end: false});
  this.process.stderr.pipe(process.stderr, {end: false});

  this.process.on('exit', function (code) {
    self.process = null;
    self.unwatchFiles();
    // var last_restart = restart_times[restart_times.length - 1];
    var elapsed = new Date() - started;
    var wait = elapsed < 1000 ? 1000 : 0;
    // wait = 0;
    setTimeout(ignition, wait);
  });
};
Restarter.prototype.watchFiles = function() {
  var self = this;
  directories.forEach(function(dir) {
    child_process.exec('find ' + dir + ' ' + extensions_filter, function(error, stdout, stderr) {
      var files = stdout.trim().split("\n");
      files.forEach(function(file) {
        self.files.push(file);
        fs.watchFile(file, {interval: 250}, function(curr, prev) {
          if (curr.mtime.valueOf() != prev.mtime.valueOf() || curr.ctime.valueOf() != prev.ctime.valueOf()) {
            console.log('- node_restarter: restarting because of changed file: ' + file);
            self.process.kill();
          }
        });
      });
    });
  });
};
Restarter.prototype.unwatchFiles = function() {
  this.files.forEach(function(file) {
    fs.unwatchFile(file);
  });
  this.files = [];
};

ignition();
